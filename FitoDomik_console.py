import cv2
import numpy as np
from PIL import Image, ImageDraw, ImageFont
from datetime import datetime
import os
import platform
import sys
import requests
import json
import base64
import io
import tempfile
import time
import serial
import re
import threading
if platform.system() == 'Windows':
    import locale
    locale.setlocale(locale.LC_ALL, 'Russian_Russia.1251')
else:
    sys.stdout.reconfigure(encoding='utf-8')
API_TOKEN = ''  
CAMERA_INDEX = 0
SERVER_URL = "http://farm429.online/api/upload-image.php"
SENSOR_API_URL = "http://farm429.online/api/save-sensor-data.php"
LED_API_URL = "http://farm429.online/api/get-lamp-state.php"
CURTAINS_API_URL = "http://farm429.online/api/get-curtains-state.php"
THRESHOLDS_API_URL = "http://farm429.online/api/get-thresholds.php"
MAX_ID_API_URL = "http://farm429.online/api/get-max-sensor-id.php"
SERIAL_PORT = 'COM10'
BAUD_RATE = 9600
SAVE_LOCAL = True
LOCAL_PATH = "photos"
OUTPUT_PATH = "plant_analysis.jpg"
FONT_PATH = "arial.ttf"
THRESHOLDS_PRINT_INTERVAL = 60
if SAVE_LOCAL and not os.path.exists(LOCAL_PATH):
    os.makedirs(LOCAL_PATH)
last_temperature = 0
last_humidity = 0
last_soil_moisture = 0
last_light_level = 0
last_co2 = 400  
last_pressure = 1013.25  
last_led_state = None
last_curtains_state = None
last_thresholds = None
last_thresholds_print_time = 0
auth_error_occurred = False
last_used_id = 0  
DISEASES_DB = {
    "yellow_leaves": {"name": "–•–ª–æ—Ä–æ–∑", "description": "–ü–æ–∂–µ–ª—Ç–µ–Ω–∏–µ –ª–∏—Å—Ç—å–µ–≤", "causes": ["–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∂–µ–ª–µ–∑–∞", "–ü–µ—Ä–µ—É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∞–∑–æ—Ç–∞"], "solutions": ["–î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–µ–∑–æ—Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏—è", "–£–º–µ–Ω—å—à–∏—Ç—å –ø–æ–ª–∏–≤", "–í–Ω–µ—Å—Ç–∏ –∞–∑–æ—Ç–Ω—ã–µ —É–¥–æ–±—Ä–µ–Ω–∏—è"]},
    "brown_spots": {"name": "–ì—Ä–∏–±–∫–æ–≤–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ", "description": "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–µ –ø—è—Ç–Ω–∞ –Ω–∞ –ª–∏—Å—Ç—å—è—Ö", "causes": ["–ì—Ä–∏–±–∫–æ–≤–∞—è –∏–Ω—Ñ–µ–∫—Ü–∏—è", "–ò–∑–±—ã—Ç–æ—á–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å", "–ü–ª–æ—Ö–∞—è –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è"], "solutions": ["–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ—É–Ω–≥–∏—Ü–∏–¥–∞–º–∏", "–£–ª—É—á—à–∏—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—é", "–£–¥–∞–ª–∏—Ç—å –ø–æ—Ä–∞–∂–µ–Ω–Ω—ã–µ –ª–∏—Å—Ç—å—è"]},
    "white_powder": {"name": "–ú—É—á–Ω–∏—Å—Ç–∞—è —Ä–æ—Å–∞", "description": "–ë–µ–ª—ã–π –Ω–∞–ª–µ—Ç –Ω–∞ –ª–∏—Å—Ç—å—è—Ö", "causes": ["–ì—Ä–∏–±–∫–æ–≤–∞—è –∏–Ω—Ñ–µ–∫—Ü–∏—è", "–í—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å", "–†–µ–∑–∫–∏–µ –ø–µ—Ä–µ–ø–∞–¥—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"], "solutions": ["–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ—É–Ω–≥–∏—Ü–∏–¥–∞–º–∏", "–°–Ω–∏–∑–∏—Ç—å –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞", "–û–±–µ—Å–ø–µ—á–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É"]},
    "leaf_curl": {"name": "–ö—É—Ä—á–∞–≤–æ—Å—Ç—å –ª–∏—Å—Ç—å–µ–≤", "description": "–î–µ—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏–µ –ª–∏—Å—Ç—å–µ–≤", "causes": ["–í–∏—Ä—É—Å–Ω–∞—è –∏–Ω—Ñ–µ–∫—Ü–∏—è", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫–∞–ª—å—Ü–∏—è", "–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–∞—Å–µ–∫–æ–º—ã–º–∏"], "solutions": ["–£–¥–∞–ª–∏—Ç—å –ø–æ—Ä–∞–∂–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏", "–í–Ω–µ—Å—Ç–∏ –∫–∞–ª—å—Ü–∏–µ–≤—ã–µ —É–¥–æ–±—Ä–µ–Ω–∏—è", "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω—Å–µ–∫—Ç–∏—Ü–∏–¥–∞–º–∏"]},
    "black_spots": {"name": "–ß–µ—Ä–Ω–∞—è –ø—è—Ç–Ω–∏—Å—Ç–æ—Å—Ç—å", "description": "–ß–µ—Ä–Ω—ã–µ –ø—è—Ç–Ω–∞ –Ω–∞ –ª–∏—Å—Ç—å—è—Ö", "causes": ["–ì—Ä–∏–±–∫–æ–≤–∞—è –∏–Ω—Ñ–µ–∫—Ü–∏—è", "–í—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Ü–∏—Ä–∫—É–ª—è—Ü–∏—è –≤–æ–∑–¥—É—Ö–∞"], "solutions": ["–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ—É–Ω–≥–∏—Ü–∏–¥–∞–º–∏", "–£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –ø–æ—Ä–∞–∂–µ–Ω–Ω—ã–µ –ª–∏—Å—Ç—å—è"]},
    "wilting": {"name": "–£–≤—è–¥–∞–Ω–∏–µ", "description": "–û–±—â–µ–µ —É–≤—è–¥–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è", "causes": ["–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –≤–æ–¥—ã", "–ö–æ—Ä–Ω–µ–≤–∞—è –≥–Ω–∏–ª—å", "–ë–∞–∫—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–µ–∫—Ü–∏—è"], "solutions": ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–ª–∏–≤–∞", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä–Ω–µ–≤—É—é —Å–∏—Å—Ç–µ–º—É", "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ—É–Ω–≥–∏—Ü–∏–¥–∞–º–∏"]},
    "mosaic": {"name": "–ú–æ–∑–∞–∏—á–Ω–∞—è –±–æ–ª–µ–∑–Ω—å", "description": "–ú–æ–∑–∞–∏—á–Ω—ã–π —É–∑–æ—Ä –Ω–∞ –ª–∏—Å—Ç—å—è—Ö", "causes": ["–í–∏—Ä—É—Å–Ω–∞—è –∏–Ω—Ñ–µ–∫—Ü–∏—è", "–ü–µ—Ä–µ–Ω–æ—Å—á–∏–∫–∏ –≤–∏—Ä—É—Å–æ–≤"], "solutions": ["–£–¥–∞–ª–∏—Ç—å –ø–æ—Ä–∞–∂–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è", "–ë–æ—Ä–æ—Ç—å—Å—è —Å –Ω–∞—Å–µ–∫–æ–º—ã–º–∏-–ø–µ—Ä–µ–Ω–æ—Å—á–∏–∫–∞–º–∏"]}
}
PESTS_DB = {
    "aphids": {"name": "–¢–ª—è", "description": "–ú–µ–ª–∫–∏–µ –Ω–∞—Å–µ–∫–æ–º—ã–µ –Ω–∞ –ª–∏—Å—Ç—å—è—Ö –∏ —Å—Ç–µ–±–ª—è—Ö", "damage": "–í—ã—Å–∞—Å—ã–≤–∞—é—Ç —Å–æ–∫ –∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏—è, –≤—ã–∑—ã–≤–∞—é—Ç –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏—é –ª–∏—Å—Ç—å–µ–≤", "solutions": ["–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω—Å–µ–∫—Ç–∏—Ü–∏–¥–∞–º–∏", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º—ã–ª—å–Ω—ã–π —Ä–∞—Å—Ç–≤–æ—Ä", "–ü—Ä–∏–≤–ª–µ—á—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ö–∏—â–Ω–∏–∫–æ–≤"]},
    "whitefly": {"name": "–ë–µ–ª–æ–∫—Ä—ã–ª–∫–∞", "description": "–ú–µ–ª–∫–∏–µ –±–µ–ª—ã–µ –ª–µ—Ç–∞—é—â–∏–µ –Ω–∞—Å–µ–∫–æ–º—ã–µ", "damage": "–í—ã—Å–∞—Å—ã–≤–∞—é—Ç —Å–æ–∫, –≤—ã–¥–µ–ª—è—é—Ç –º–µ–¥–≤—è–Ω—É—é —Ä–æ—Å—É, –ø–µ—Ä–µ–Ω–æ—Å—è—Ç –≤–∏—Ä—É—Å—ã", "solutions": ["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∂–µ–ª—Ç—ã–µ –ª–∏–ø–∫–∏–µ –ª–æ–≤—É—à–∫–∏", "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω—Å–µ–∫—Ç–∏—Ü–∏–¥–∞–º–∏", "–†–µ–≥—É–ª—è—Ä–Ω–æ –æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –Ω–∏–∂–Ω—é—é —Å—Ç–æ—Ä–æ–Ω—É –ª–∏—Å—Ç—å–µ–≤"]},
    "thrips": {"name": "–¢—Ä–∏–ø—Å—ã", "description": "–ú–µ–ª–∫–∏–µ —É–¥–ª–∏–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å–µ–∫–æ–º—ã–µ", "damage": "–ü–æ–≤—Ä–µ–∂–¥–∞—é—Ç –ª–∏—Å—Ç—å—è –∏ —Ü–≤–µ—Ç—ã, –ø–µ—Ä–µ–Ω–æ—Å—è—Ç –≤–∏—Ä—É—Å—ã", "solutions": ["–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω—Å–µ–∫—Ç–∏—Ü–∏–¥–∞–º–∏", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–Ω–∏–µ –ª–∏–ø–∫–∏–µ –ª–æ–≤—É—à–∫–∏", "–£–¥–∞–ª—è—Ç—å —Å–æ—Ä–Ω—è–∫–∏"]},
    "mealybugs": {"name": "–ú—É—á–Ω–∏—Å—Ç—ã–µ —á–µ—Ä–≤–µ—Ü—ã", "description": "–ë–µ–ª—ã–µ –ø—É—à–∏—Å—Ç—ã–µ –Ω–∞—Å–µ–∫–æ–º—ã–µ", "damage": "–í—ã—Å–∞—Å—ã–≤–∞—é—Ç —Å–æ–∫, –≤—ã–¥–µ–ª—è—é—Ç –º–µ–¥–≤—è–Ω—É—é —Ä–æ—Å—É", "solutions": ["–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–∏—Ä—Ç–æ–≤—ã–º —Ä–∞—Å—Ç–≤–æ—Ä–æ–º", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å–µ–∫—Ç–∏—Ü–∏–¥—ã", "–ò–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä–∞–∂–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"]},
    "scale_insects": {"name": "–©–∏—Ç–æ–≤–∫–∏", "description": "–ù–µ–ø–æ–¥–≤–∏–∂–Ω—ã–µ –Ω–∞—Å–µ–∫–æ–º—ã–µ –ø–æ–¥ –∑–∞—â–∏—Ç–Ω—ã–º —â–∏—Ç–∫–æ–º", "damage": "–í—ã—Å–∞—Å—ã–≤–∞—é—Ç —Å–æ–∫, –æ—Å–ª–∞–±–ª—è—é—Ç —Ä–∞—Å—Ç–µ–Ω–∏–µ", "solutions": ["–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—å", "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞—Å–ª—è–Ω—ã–º–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º–∏", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å–µ–∫—Ç–∏—Ü–∏–¥—ã"]},
    "caterpillars": {"name": "–ì—É—Å–µ–Ω–∏—Ü—ã", "description": "–õ–∏—á–∏–Ω–∫–∏ –±–∞–±–æ—á–µ–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤", "damage": "–û–±—ä–µ–¥–∞—é—Ç –ª–∏—Å—Ç—å—è, —Å—Ç–µ–±–ª–∏ –∏ –ø–ª–æ–¥—ã", "solutions": ["–°–æ–±–∏—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã", "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω—Å–µ–∫—Ç–∏—Ü–∏–¥–∞–º–∏"]}
}
LEAF_COLORS = {
    "healthy_green": {"lower": np.array([35, 30, 30]), "upper": np.array([85, 255, 255]), "name": "–∑–¥–æ—Ä–æ–≤—ã–π –∑–µ–ª–µ–Ω—ã–π"},
    "yellow": {"lower": np.array([20, 30, 30]), "upper": np.array([35, 255, 255]), "name": "–∂–µ–ª—Ç—ã–π"},
    "brown": {"lower": np.array([10, 30, 10]), "upper": np.array([20, 255, 255]), "name": "–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π"},
    "light_green": {"lower": np.array([35, 30, 30]), "upper": np.array([85, 100, 255]), "name": "—Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π"}
}
def get_api_token():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç API —Ç–æ–∫–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\nüíª –ù–ê–°–¢–†–û–ô–ö–ê API –¢–û–ö–ï–ù–ê")
    print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
    print("–î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è API —Ç–æ–∫–µ–Ω.")
    print("–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å–∞–π—Ç–µ: https://farm429.online/get_token.php")
    print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
    token = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API —Ç–æ–∫–µ–Ω: ").strip()
    while not token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        token = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API —Ç–æ–∫–µ–Ω: ").strip()
    return token
def print_auth_error():
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    global auth_error_occurred
    if not auth_error_occurred:
        print()
        print("‚õî –û–®–ò–ë–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ‚õî")
        print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: https://farm429.online/get_token.php")
        print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
        print()
        auth_error_occurred = True
        sys.exit(1)
def take_photo():
    """–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã"""
    cap = cv2.VideoCapture(CAMERA_INDEX)
    if not cap.isOpened():
        raise Exception("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã")
    ret, frame = cap.read()
    cap.release()
    if not ret:
        raise Exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–∞–º–µ—Ä—ã")
    return frame
def upload_to_server(original_image, analysis_image, text="–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π"):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    try:
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        orig_filename = f"farm_photo_{timestamp}.jpg"
        analysis_filename = f"farm_analysis_{timestamp}.jpg"
        cv2.imwrite(orig_filename, original_image)
        cv2.imwrite(analysis_filename, analysis_image)
        if not os.path.exists(orig_filename) or not os.path.exists(analysis_filename):
            raise Exception("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
        data = {
            'text': text, 
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'), 
            'has_analysis': 'true'
        }
        headers = {
            'X-Auth-Token': API_TOKEN
        }
        with open(orig_filename, 'rb') as orig_file, open(analysis_filename, 'rb') as analysis_file:
            files = {
                'image': ('original.jpg', orig_file.read(), 'image/jpeg'),
                'analysis_image': ('analysis.jpg', analysis_file.read(), 'image/jpeg')
            }
            response = requests.post(SERVER_URL, data=data, files=files, headers=headers)
            if response.status_code != 200:
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            try:
                response_data = response.json()
            except json.JSONDecodeError:
                raise Exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞")
            if not response_data.get('success'):
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            print(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {response_data.get('user_id')}")
            return True
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {str(e)}")
    finally:
        for filename in [orig_filename, analysis_filename]:
            if os.path.exists(filename):
                try: os.remove(filename)
                except: pass
class PlantAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ —Ñ–æ—Ç–æ"""
    def __init__(self):
        self.font_path = FONT_PATH
        self.color_percentages = {}
        self.detected_diseases = []
        self.detected_pests = []
        self.camera = None
        self.screen_width = 1920
        self.screen_height = 1080
        try:
            from win32api import GetSystemMetrics
            self.screen_width = GetSystemMetrics(0)
            self.screen_height = GetSystemMetrics(1)
        except:
            try:
                import tkinter as tk
                root = tk.Tk()
                self.screen_width = root.winfo_screenwidth()
                self.screen_height = root.winfo_screenheight()
                root.destroy()
            except: pass
    def detect_plant(self):
        hsv = cv2.cvtColor(self.original_image, cv2.COLOR_BGR2HSV)
        self.detection_image = self.original_image.copy()
        total_mask = np.zeros((self.height, self.width), dtype=np.uint8)
        for color_name, color_range in LEAF_COLORS.items():
            mask = cv2.inRange(hsv, color_range["lower"], color_range["upper"])
            kernel = np.ones((3,3), np.uint8)
            mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)
            mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)
            total_mask = cv2.bitwise_or(total_mask, mask)
        contours, _ = cv2.findContours(total_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        filtered_contours = []
        for contour in contours:
            if cv2.contourArea(contour) > 100:
                filtered_contours.append(contour)
        cv2.drawContours(self.detection_image, filtered_contours, -1, (0, 255, 0), 2)
        self.plant_mask = np.zeros_like(total_mask)
        cv2.drawContours(self.plant_mask, filtered_contours, -1, 255, -1)
        plant_pixels = np.count_nonzero(self.plant_mask)
        if plant_pixels > 0:
            for color_name, color_range in LEAF_COLORS.items():
                mask = cv2.inRange(hsv, color_range["lower"], color_range["upper"])
                color_pixels = cv2.countNonZero(cv2.bitwise_and(mask, self.plant_mask))
                self.color_percentages[color_name] = (color_pixels / plant_pixels) * 100
    def detect_diseases(self):
        self.detected_diseases = []
        if self.color_percentages.get("yellow", 0) > 10:
            self.detected_diseases.append(DISEASES_DB["yellow_leaves"])
        if self.color_percentages.get("brown", 0) > 5:
            self.detected_diseases.append(DISEASES_DB["brown_spots"])
    def detect_pests(self):
        self.detected_pests = []
        if self.color_percentages.get("brown", 0) > 5:
            if self.color_percentages.get("yellow", 0) > 15:
                self.detected_pests.append(PESTS_DB["aphids"])
            elif self.color_percentages.get("brown", 0) > 10:
                self.detected_pests.append(PESTS_DB["thrips"])
    def analyze_health(self):
        self.detect_diseases()
        self.detect_pests()
        status = "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ"
        details = []
        recommendations = []
        if self.color_percentages.get("yellow", 0) > 10:
            status = "—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
            details.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–∂–µ–ª—Ç–µ–Ω–∏–µ –ª–∏—Å—Ç—å–µ–≤")
            recommendations.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∂–∏–º –ø–æ–ª–∏–≤–∞")
            recommendations.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏")
        if self.color_percentages.get("brown", 0) > 5:
            status = "—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
            details.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ—Ä–∏—á–Ω–µ–≤—ã–µ —É—á–∞—Å—Ç–∫–∏ –Ω–∞ –ª–∏—Å—Ç—å—è—Ö")
            recommendations.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π")
            recommendations.append("–£–¥–∞–ª–∏—Ç–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –ª–∏—Å—Ç—å—è")
        for disease in self.detected_diseases:
            details.append(f"{disease['name']}: {disease['description']}")
            recommendations.extend(disease['solutions'])
        for pest in self.detected_pests:
            details.append(f"{pest['name']}: {pest['description']}")
            recommendations.extend(pest['solutions'])
        if not details:
            recommendations.append("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —É—Ö–æ–¥–∞")
        return {
            "—Å–æ—Å—Ç–æ—è–Ω–∏–µ": status,
            "—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤": "; ".join([f"{LEAF_COLORS[k]['name']}: {v:.1f}%" for k, v in self.color_percentages.items() if v > 1]),
            "–¥–µ—Ç–∞–ª–∏": "; ".join(details) if details else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ",
            "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": "; ".join(recommendations)
        }
def run_plant_analysis():
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏—è –ø–æ —Ñ–æ—Ç–æ"""
    analyzer = PlantAnalyzer()
    try:
        print("\n=== –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è ===")
        print(f"API —Ç–æ–∫–µ–Ω: {API_TOKEN}")
        if len(sys.argv) > 1:
            frame = cv2.imread(sys.argv[1])
            if frame is None:
                raise Exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞")
        else:
            frame = take_photo()
        analyzer.original_image = frame.copy()
        analyzer.height, analyzer.width = frame.shape[:2]
        analyzer.detect_plant()
        analysis = analyzer.analyze_health()
        report_text = f"–ê–ù–ê–õ–ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø –†–ê–°–¢–ï–ù–ò–Ø\n–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n–°–û–°–¢–û–Ø–ù–ò–ï: {analysis['—Å–æ—Å—Ç–æ—è–Ω–∏–µ']}\n\n–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¶–í–ï–¢–û–í:\n{analysis['—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤']}\n\n–î–ï–¢–ê–õ–ò –ê–ù–ê–õ–ò–ó–ê:\n{analysis['–¥–µ—Ç–∞–ª–∏']}\n\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n{analysis['—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏']}\n"
        if upload_to_server(analyzer.original_image, analyzer.detection_image, report_text):
            print("–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        else:
            print("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏!")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}")
        return False
def print_status():
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("‚îÄ‚îÄ üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
    if last_led_state is not None:
        print(f"üí° –õ–∞–º–ø–∞:   {'‚úÖ –≤–∫–ª—é—á–µ–Ω–∞' if last_led_state == 1 else '‚ùå –≤—ã–∫–ª—é—á–µ–Ω–∞'}")
    if last_curtains_state is not None:
        print(f"ü™ü –®—Ç–æ—Ä—ã:   {'‚úÖ –∑–∞–∫—Ä—ã—Ç—ã' if last_curtains_state == 1 else '‚ùå –æ—Ç–∫—Ä—ã—Ç—ã'}")
    print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
    print()
def get_max_sensor_id():
    """–ü–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã sensor_data"""
    try:
        headers = {'X-Auth-Token': API_TOKEN}
        response = requests.get(MAX_ID_API_URL, headers=headers)
        if response.status_code == 200:
            data = response.json()
            if data.get('success') and 'max_id' in data:
                return int(data['max_id'])
            else:
                print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è max_id: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return 0
        elif response.status_code == 401:
            print_auth_error()
            return 0
        else:
            print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ max_id: {response.status_code}")
            return 0
    except Exception as e:
        print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ max_id: {str(e)}")
        return 0
def get_thresholds():
    try:
        headers = {'X-Auth-Token': API_TOKEN}
        response = requests.get(THRESHOLDS_API_URL, headers=headers)
        if response.status_code == 200:
            data = response.json()
            current_time = time.time()
            global last_thresholds_print_time
            if current_time - last_thresholds_print_time >= THRESHOLDS_PRINT_INTERVAL:
                print()
                print(f"üìä –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')})")
                print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
                print(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:        {data['temperature']['min']}¬∞C - {data['temperature']['max']}¬∞C")
                print(f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞:  {data['humidity']['min']}% - {data['humidity']['max']}%")
                print(f"üå± –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã:    {data['soil_moisture']['min']}% - {data['soil_moisture']['max']}%")
                print(f"ü´ß CO‚ÇÇ:                {data['co2']['min']} ppm - {data['co2']['max']} ppm")
                print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
                print_status()
                last_thresholds_print_time = current_time
            return data
        elif response.status_code == 401:
            print_auth_error()
            return None
        return None
    except Exception as e:
        print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤: {str(e)}")
        return None
def get_led_state():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–º–ø—ã —Å —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        headers = {'X-Auth-Token': API_TOKEN}
        response = requests.get(LED_API_URL, headers=headers, timeout=5)
        if response.status_code != 200:
            if response.status_code == 401:
                print_auth_error()
            else:
                print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–∞–º–ø—ã: HTTP {response.status_code}")
            return None
        try:
            data = response.json()
            if data.get('success') == True and 'state' in data:
                state = data.get('state')
                return 1 if int(state) == 1 else 0
            else:
                print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: {data}")
                return None
        except json.JSONDecodeError as e:
            print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON –≤ –æ—Ç–≤–µ—Ç–µ –ª–∞–º–ø—ã: {str(e)}")
            print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {response.text}")
            return None
    except requests.exceptions.Timeout:
        print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–∞–º–ø—ã")
        return None
    except requests.exceptions.RequestException as e:
        print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–∞–º–ø—ã: {str(e)}")
        return None
    except Exception as e:
        print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–∞–º–ø—ã: {str(e)}")
        return None
def get_curtains_state():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à—Ç–æ—Ä —Å —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        headers = {'X-Auth-Token': API_TOKEN}
        response = requests.get(CURTAINS_API_URL, headers=headers, timeout=5)
        if response.status_code != 200:
            if response.status_code == 401:
                print_auth_error()
            else:
                print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —à—Ç–æ—Ä: HTTP {response.status_code}")
            return None
        try:
            data = response.json()
            if data.get('success') == True and 'state' in data:
                state = data.get('state')
                return 1 if int(state) == 1 else 0
            else:
                print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: {data}")
                return None
        except json.JSONDecodeError as e:
            print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON –≤ –æ—Ç–≤–µ—Ç–µ —à—Ç–æ—Ä: {str(e)}")
            print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {response.text}")
            return None
    except requests.exceptions.Timeout:
        print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —à—Ç–æ—Ä")
        return None
    except requests.exceptions.RequestException as e:
        print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —à—Ç–æ—Ä: {str(e)}")
        return None
    except Exception as e:
        print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —à—Ç–æ—Ä: {str(e)}")
        return None 
def send_command(ser, device_type, state):
    try:
        state_value = 1 if state == 1 else 0
        command = f"{device_type}:{state_value}\n"
        if not ser.is_open:
            print(f"‚ùå –û—à–∏–±–∫–∞: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç")
            return False
        print(f"üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É: {command.strip()}")
        ser.write(command.encode())
        if device_type == "LED":
            status_text = "‚úÖ –≤–∫–ª—é—á–µ–Ω–∞" if state_value == 1 else "‚ùå –≤—ã–∫–ª—é—á–µ–Ω–∞"
            print(f"üí° –õ–∞–º–ø–∞: {status_text}")
            global last_led_state
            last_led_state = state_value
        elif device_type == "CURTAINS":
            status_text = "‚úÖ –∑–∞–∫—Ä—ã—Ç—ã" if state_value == 1 else "‚ùå –æ—Ç–∫—Ä—ã—Ç—ã"
            print(f"ü™ü –®—Ç–æ—Ä—ã: {status_text}")
            global last_curtains_state
            last_curtains_state = state_value
        print()
        time.sleep(0.5)  
        if ser.in_waiting:
            response = ser.readline().decode('utf-8', errors='replace').strip()
            if response:
                print(f"üîÑ –û—Ç–≤–µ—Ç Arduino: {response}")
        return True
    except serial.SerialException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞: {str(e)}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
        return False
def devices_control_thread(ser):
    global last_led_state, last_curtains_state, last_thresholds
    print(f"üßµ –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏")
    print()
    last_led_state = None
    last_curtains_state = None
    current_lamp_state_from_server = -1
    current_curtains_state_from_server = -1
    last_successful_state_check = 0
    check_interval = 5
    error_count = 0
    max_errors = 3
    while True:
        try:
            current_time = time.time()
            if current_time - last_successful_state_check >= check_interval:
                led_state = get_led_state()
                if led_state is not None:
                    error_count = 0
                    last_successful_state_check = current_time
                    current_lamp_state_from_server = led_state
                    if last_led_state is None or last_led_state != current_lamp_state_from_server:
                        print(f"üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–∞–º–ø—ã: {last_led_state if last_led_state is not None else '?'} ‚û°Ô∏è {current_lamp_state_from_server}")
                        if send_command(ser, "LED", current_lamp_state_from_server):
                            last_led_state = current_lamp_state_from_server
                curtains_state = get_curtains_state()
                if curtains_state is not None:
                    error_count = 0
                    last_successful_state_check = current_time
                    current_curtains_state_from_server = curtains_state
                    if last_curtains_state is None or last_curtains_state != current_curtains_state_from_server:
                        print(f"üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —à—Ç–æ—Ä: {last_curtains_state if last_curtains_state is not None else '?'} ‚û°Ô∏è {current_curtains_state_from_server}")
                        if send_command(ser, "CURTAINS", current_curtains_state_from_server):
                            last_curtains_state = current_curtains_state_from_server
            if current_time - last_thresholds_print_time >= THRESHOLDS_PRINT_INTERVAL:
                current_thresholds = get_thresholds()
                if current_thresholds is not None:
                    last_thresholds = current_thresholds
            time.sleep(1)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏: {str(e)}")
            error_count += 1
            if error_count >= max_errors:
                check_interval = min(30, check_interval * 2)  
                print(f"‚ö†Ô∏è –£–≤–µ–ª–∏—á–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ {check_interval} —Å–µ–∫—É–Ω–¥ –∏–∑-–∑–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –æ—à–∏–±–æ–∫")
                error_count = 0  
            time.sleep(3)
def save_to_server(user_id=1):
    global last_temperature, last_humidity, last_soil_moisture, last_light_level, last_co2, last_pressure
    global last_led_state, last_curtains_state, last_used_id
    try:
        if last_temperature == 0 or last_humidity == 0:
            return False
        max_id = get_max_sensor_id()
        next_id = max(max_id + 1, last_used_id + 1)
        print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –ò—Å–ø–æ–ª—å–∑—É–µ–º ID {next_id} –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞–∫—Å. ID: {max_id})")
        post_data = {
            'id': next_id,  
            'user_id': user_id,
            'temperature': float(last_temperature),
            'humidity': float(last_humidity),
            'soil_moisture': float(last_soil_moisture),
            'light_level': float(last_light_level),
            'co2': int(last_co2),
            'pressure': float(last_pressure),
            'lamp_state': int(last_led_state) if last_led_state is not None else 0,
            'curtains_state': int(last_curtains_state) if last_curtains_state is not None else 0
        }
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'X-Auth-Token': API_TOKEN
        }
        response = requests.post(SENSOR_API_URL, data=post_data, headers=headers)
        if response.status_code == 200:
            try:
                resp_data = response.json()
                if resp_data.get('success'):
                    last_used_id = next_id  
                    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    print()
                    print(f"üìÖ {current_time}")
                    print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
                    print(f"üÜî ID –∑–∞–ø–∏—Å–∏:              {next_id}")
                    print(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞:    {post_data['temperature']:.1f}¬∞C")
                    print(f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞:      {post_data['humidity']:.1f}%")
                    print(f"üå± –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã:        {post_data['soil_moisture']:.1f}%")
                    print(f"üîÜ –£—Ä–æ–≤–µ–Ω—å –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏:   {post_data['light_level']:.2f} lx")
                    print(f"ü´ß CO‚ÇÇ —É—Ä–æ–≤–µ–Ω—å:            {post_data['co2']} ppm")
                    print(f"üå¨Ô∏è –ê—Ç–º. –¥–∞–≤–ª–µ–Ω–∏–µ:          {post_data['pressure']:.2f} hPa")
                    print(f"üí° –õ–∞–º–ø–∞:                  {'–≤–∫–ª—é—á–µ–Ω–∞' if post_data['lamp_state'] == 1 else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}")
                    print(f"ü™ü –®—Ç–æ—Ä—ã:                  {'–∑–∞–∫—Ä—ã—Ç—ã' if post_data['curtains_state'] == 1 else '–æ—Ç–∫—Ä—ã—Ç—ã'}")
                    print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
                    return True
                else:
                    print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {resp_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    return False
            except json.JSONDecodeError:
                print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ –æ—Ç–≤–µ—Ç–µ")
                return False
        elif response.status_code == 401:
            print_auth_error()
            return False
        else:
            print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
    except Exception as e:
        print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    return False 
def update_sensor_values(line):
    global last_temperature, last_humidity, last_soil_moisture, last_light_level, last_co2, last_pressure
    try:
        temp_match = re.search(r'[Tt]emp(?:erature)?\s*:\s*(\d+\.?\d*)', line)
        if temp_match:
            last_temperature = float(temp_match.group(1))
        humidity_match = re.search(r'[Hh]umidity\s*:\s*(\d+\.?\d*)', line)
        if humidity_match:
            last_humidity = float(humidity_match.group(1))
        soil_match = re.search(r'[Ss]oil\s*moisture\s*:\s*(\d+\.?\d*)', line)
        if soil_match:
            last_soil_moisture = float(soil_match.group(1))
        light_match = re.search(r'[Ll]ight\s*level\s*:\s*(\d+\.?\d*)', line)
        if light_match:
            last_light_level = float(light_match.group(1))
        co2_match = re.search(r'[Cc][Oo]2\s*:\s*(\d+\.?\d*)', line)
        if co2_match:
            last_co2 = float(co2_match.group(1))
        pressure_match = re.search(r'[Pp]ressure\s*:\s*(\d+\.?\d*)', line)
        if pressure_match:
            last_pressure = float(pressure_match.group(1))
        return (last_temperature > 0 and 
                last_humidity > 0 and 
                last_soil_moisture >= 0 and 
                last_light_level >= 0)
    except Exception as e:
        print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤: {str(e)}")
        return False
def check_all_sensors_ready():
    global last_temperature, last_humidity, last_soil_moisture, last_light_level
    return (last_temperature > 0 and 
            last_humidity > 0 and 
            last_soil_moisture >= 0 and 
            last_light_level >= 0)
def parse_time(time_str):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥—ã"""
    time_units = {
        '—á': 3600, 'h': 3600,  
        '–º': 60, 'm': 60,      
        '—Å': 1, 's': 1         
    }
    pattern = r'(\d+)([—á–º—Å]|[hms])'
    matches = re.findall(pattern, time_str.lower())
    if not matches:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
    total_seconds = 0
    for number, unit in matches:
        total_seconds += int(number) * time_units[unit]
    return total_seconds
def format_interval(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    seconds = seconds % 60
    parts = []
    if hours > 0:
        parts.append(f"{hours}—á")
    if minutes > 0:
        parts.append(f"{minutes}–º")
    if seconds > 0 or not parts:
        parts.append(f"{seconds}—Å")
    return "".join(parts)
def get_interval_from_user():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    while True:
        print()
        print("‚è±Ô∏è –ù–ê–°–¢–†–û–ô–ö–ê –ò–ù–¢–ï–†–í–ê–õ–ê –û–¢–ü–†–ê–í–ö–ò –î–ê–ù–ù–´–•")
        print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
        print("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä (—á–∞—Å—ã, –º–∏–Ω—É—Ç—ã, —Å–µ–∫—É–Ω–¥—ã):")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  1—á       - 1 —á–∞—Å")
        print("  30–º      - 30 –º–∏–Ω—É—Ç")
        print("  45—Å      - 45 —Å–µ–∫—É–Ω–¥")
        print("  1—á30–º    - 1 —á–∞—Å 30 –º–∏–Ω—É—Ç")
        print("  2–º30—Å    - 2 –º–∏–Ω—É—Ç—ã 30 —Å–µ–∫—É–Ω–¥")
        print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
        try:
            interval_str = input("–ò–Ω—Ç–µ—Ä–≤–∞–ª: ").strip()
            interval_seconds = parse_time(interval_str)
            print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {format_interval(interval_seconds)}")
            print()
            return interval_seconds
        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            print()
def get_photo_interval_from_user():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    while True:
        print()
        print("üì∏ –ù–ê–°–¢–†–û–ô–ö–ê –ò–ù–¢–ï–†–í–ê–õ–ê –§–û–¢–û–ì–†–ê–§–ò–†–û–í–ê–ù–ò–Ø")
        print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
        print("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (—á–∞—Å—ã, –º–∏–Ω—É—Ç—ã, —Å–µ–∫—É–Ω–¥—ã):")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  1—á       - 1 —á–∞—Å")
        print("  30–º      - 30 –º–∏–Ω—É—Ç")
        print("  45—Å      - 45 —Å–µ–∫—É–Ω–¥")
        print("  1—á30–º    - 1 —á–∞—Å 30 –º–∏–Ω—É—Ç")
        print("  2–º30—Å    - 2 –º–∏–Ω—É—Ç—ã 30 —Å–µ–∫—É–Ω–¥")
        print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
        try:
            interval_str = input("–ò–Ω—Ç–µ—Ä–≤–∞–ª: ").strip()
            interval_seconds = parse_time(interval_str)
            print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è: {format_interval(interval_seconds)}")
            print()
            return interval_seconds
        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            print()
def photo_thread_function(photo_interval):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–∞, –≤—ã–ø–æ–ª–Ω—è—é—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    print(f"üßµ –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {format_interval(photo_interval)})")
    last_photo_time = 0
    while True:
        try:
            current_time = time.time()
            if current_time - last_photo_time >= photo_interval:
                print("\n=== –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è ===")
                analyzer = PlantAnalyzer()
                try:
                    frame = take_photo()
                    analyzer.original_image = frame.copy()
                    analyzer.height, analyzer.width = frame.shape[:2]
                    analyzer.detect_plant()
                    analysis = analyzer.analyze_health()
                    report_text = f"–ê–ù–ê–õ–ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø –†–ê–°–¢–ï–ù–ò–Ø\n–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n–°–û–°–¢–û–Ø–ù–ò–ï: {analysis['—Å–æ—Å—Ç–æ—è–Ω–∏–µ']}\n\n–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¶–í–ï–¢–û–í:\n{analysis['—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤']}\n\n–î–ï–¢–ê–õ–ò –ê–ù–ê–õ–ò–ó–ê:\n{analysis['–¥–µ—Ç–∞–ª–∏']}\n\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n{analysis['—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏']}\n"
                    if upload_to_server(analyzer.original_image, analyzer.detection_image, report_text):
                        print(f"‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})")
                        last_photo_time = current_time
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
                    last_photo_time = current_time
            time.sleep(min(60, photo_interval / 10))  
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
            time.sleep(10)  
def run_sensor_monitoring():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∞—Ç—á–∏–∫–æ–≤"""
    global last_temperature, last_humidity, last_soil_moisture, last_light_level, last_co2, last_pressure
    global last_led_state, last_curtains_state, last_used_id
    last_temperature = -1
    last_humidity = -1
    last_soil_moisture = -1
    last_light_level = -1
    last_co2 = 400
    last_pressure = 1013.25
    last_led_state = None
    last_curtains_state = None
    last_used_id = get_max_sensor_id()
    print(f"üî¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {last_used_id}")
    try:
        sensor_interval = get_interval_from_user()
        photo_interval = get_photo_interval_from_user()
        print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Arduino –Ω–∞ –ø–æ—Ä—Ç—É {SERIAL_PORT}...")
        try:
            ser = serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=1)
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Arduino –Ω–∞ –ø–æ—Ä—Ç—É {SERIAL_PORT}")
        except serial.SerialException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Arduino: {str(e)}")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("   1. –ü–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ Arduino –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É")
            print("   2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ COM-–ø–æ—Ä—Ç —É–∫–∞–∑–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            print("   3. –ù–µ –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç –¥—Ä—É–≥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π")
            return
        print(f"üì° –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤...")
        devices_thread = threading.Thread(target=devices_control_thread, args=(ser,), daemon=True)
        devices_thread.start()
        photo_thread = threading.Thread(target=photo_thread_function, args=(photo_interval,), daemon=True)
        photo_thread.start()
        last_send_time = 0
        first_data_collected = False
        data_ready = False
        while True:
            try:
                if ser.in_waiting:
                    line = ser.readline().decode('utf-8', errors='replace').strip()
                    if not line:
                        continue
                    if line.startswith("LED:") or line.startswith("CURTAINS:"):
                        continue
                    all_data_received = update_sensor_values(line)
                    if not first_data_collected:
                        if check_all_sensors_ready():
                            first_data_collected = True
                            data_ready = True
                            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –ø–µ—Ä–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤")
                    else:
                        if all_data_received:
                            data_ready = True
                    current_time = time.time()
                    if data_ready and (current_time - last_send_time >= sensor_interval):
                        if save_to_server():
                            last_send_time = current_time
                            data_ready = False
                time.sleep(0.1)
            except serial.SerialException as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞: {str(e)}")
                time.sleep(1)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
                time.sleep(1)
    except KeyboardInterrupt:
        print()
        print("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print()
        print(f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        if 'ser' in locals() and ser.is_open:
            ser.close()
            print(f"üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Arduino –∑–∞–∫—Ä—ã—Ç–æ")
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    global API_TOKEN
    API_TOKEN = get_api_token()
    print("\n==== –£–ü–†–ê–í–õ–ï–ù–ò–ï –£–ú–ù–û–ô –¢–ï–ü–õ–ò–¶–ï–ô ====")
    print("API —Ç–æ–∫–µ–Ω:", API_TOKEN)
    print("\n1. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Ñ–æ—Ç–æ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è...")
    run_plant_analysis()
    print("\n2. –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–∞—Ç—á–∏–∫–æ–≤ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è...")
    run_sensor_monitoring()
if __name__ == "__main__":
    main() 